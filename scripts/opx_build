#!/bin/bash -e

# Use temporary output directory isolate the output of each build
GIT_PBUILDER_OUTPUT_DIR=$(mktemp -d)
export GIT_PBUILDER_OUTPUT_DIR

cleanup () {
  rm -rf "${GIT_PBUILDER_OUTPUT_DIR}"
  rm -f ./*.{dsc,tar.gz,build,changes}
}
trap cleanup EXIT

# Available options
export OPX_GIT_TAG="${OPX_GIT_TAG:-no}"

# Set build options
export OPX_RELEASE="${OPX_RELEASE:-unstable}"
export DIST="${DIST:-stretch}"
export ARCH="${ARCH:-amd64}"

# Define list of repositories in dependency order.
# TODO: read the debian/control files and compute the dependency graph.
repos=(
opx-core
opx-logging
opx-common-utils
opx-cps
opx-base-model
opx-db-sql
opx-sai-api
opx-sai-vm
opx-nas-common
opx-nas-linux
opx-nas-ndi-api
opx-nas-ndi
opx-nas-acl
opx-nas-interface
opx-nas-l2
opx-nas-l3
opx-nas-qos
opx-nas-daemon
opx-platform-config
opx-sdi-sys
opx-pas
opx-tmpctl
opx-tools
opx-alarm
opx-snmp
)

if [ $# -gt 0 ] && [ "$1" != "all" ]; then
  repos=( "$@" )
fi

for r in ${repos[*]}; do
  if [ ! -d "$r" ]; then
    echo "$r does not exist..."
    continue
  fi

  POOL="pool/${DIST}-${ARCH}"
  OUTPUT_DIR="$POOL/$r"
  mkdir -p "$OUTPUT_DIR"

  if [ -e "$r/DEBIAN/control" ] && [ ! -e "$r/DEBIAN/rules" ]; then
    chmod 00755 "$r/DEBIAN" || true
    dpkg-deb -b "$r" "$OUTPUT_DIR"
    echo "Build results can be found in $OUTPUT_DIR."
  elif [ -e "$r/debian/control" ]; then
    (
    # create local package cache
    (cd "/mnt/$POOL" && dpkg-scanpackages -m . >Packages)

    cd "$r"

    if [ "$OPX_GIT_TAG"b = "yes"b ]; then
      gbp buildpackage --git-tag-only
    else
      gbp buildpackage \
        --git-pbuilder \
        --git-dist="$DIST" \
        --git-arch="$ARCH" \
        --git-ignore-branch \
        --git-ignore-new

      find "$GIT_PBUILDER_OUTPUT_DIR" \
        \( -name '*.deb' -o -name '*.dsc' -o -name '*.changes' -o -name '*.tar.gz' -o -name '*.build' -o -name '*.buildinfo' \) \
        -exec cp -t "../$OUTPUT_DIR/" {} +
      echo "Build results can be found in $OUTPUT_DIR."
    fi

    # clear output directory for next package
    # question mark ensures that rm -rf /* is never run
    rm -rf "${GIT_PBUILDER_OUTPUT_DIR:?}"/*
    )
  else
    echo "Error. No debian/control file found in $r."
    exit 1
  fi
done

rm -f /mnt/Packages || true

# vim: set sw=2 et
